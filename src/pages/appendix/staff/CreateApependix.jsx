import React, { useCallback, useEffect, useState } from 'react';
import { Input, Button, DatePicker, Select, Divider, Space, Checkbox, Table, InputNumber, Typography, Popover, message, Form, Skeleton } from 'antd';
import { useSelector } from 'react-redux';
import dayjs from 'dayjs';
import RichTextEditor from 'reactjs-tiptap-editor';
import 'reactjs-tiptap-editor/style.css';
import 'katex/dist/katex.min.css';
import { extensions } from "../../../utils/textEditor";
import { useCreateAppendixMutation, useGetAppendixDetailQuery, useUpdateAppendixMutation } from '../../../services/AppendixAPI';
import { useLocation, useNavigate } from 'react-router-dom';
import { DeleteFilled, PlusOutlined, EyeFilled } from '@ant-design/icons';
import { useGetAllContractQuery, useGetContractDetailQuery } from '../../../services/ContractAPI';
import LazySelect from '../../../hooks/LazySelect';
import { useLazyGetClauseManageQuery } from '../../../services/ClauseAPI';
import { numberToVietnamese } from '../../../utils/ConvertMoney';
import { TermsectionForAppendix } from '../../../config/TermsectionForAppendix';
import ModalAdd from '../../Contract/component/ModalAdd';


const { Option } = Select;

const ContractAppendixPage = () => {
    const navigate = useNavigate();
    const location = useLocation();
    const queryParams = new URLSearchParams(location.search);
    const contractId = queryParams.get('contractId');
    const appendixId = queryParams.get('appendixId');
    const contractNumber = queryParams.get('contractNumber');
    const [form] = Form.useForm();
    const isDarkMode = useSelector((state) => state.theme.isDarkMode);
    const [content, setContent] = useState('');
    const [contentSell, setContentSell] = useState('');
    const [loadingData, setLoadingData] = useState(true);
    const [selectedTypes, setSelectedTypes] = useState([]);
    const [editOptions, setEditOptions] = useState({ cost: false, terms: false });
    const [contractExpiryDate, setContractExpiryDate] = useState(null);
    const [isTitleAutoGenerated, setIsTitleAutoGenerated] = useState(true);
    const [isAddClasueModalOpen, setIsAddClauseModalOpen] = useState(false);
    const [textValue, setTextValue] = useState("");
    const [selectedOthersTerms, setSelectedOthersTerms] = useState([]);
    const [errorMessage, setErrorMessage] = useState('');
    const [adddClauseId, setIsAddClauseId] = useState(0);
    const [createAppendix, { isLoading: LoadingCreate }] = useCreateAppendixMutation();
    const [updateAppendix, { isLoading: LoadingUpdate }] = useUpdateAppendixMutation();

    const { data: contractDetailData, isLoading: isLoadingContractDetail, refetch: refecthContractDetail } = useGetContractDetailQuery(
        contractId, { skip: !contractId }
    );
    // console.log(contractDetailData)
    const [getGeneralTerms, { data: generalData, isLoading: loadingGenaral, refetch: refetchGenaral }] = useLazyGetClauseManageQuery();
    const { data: appendixData, isLoading: isLoadingAppendix, refetch } = useGetAppendixDetailQuery({ id: appendixId }, { skip: !appendixId });
    const { data: contracts, isLoading: isLoadingContracts } = useGetAllContractQuery(
        { status: "ACTIVE" },
        { skip: !!contractId }
    );


    useEffect(() => {
        if (appendixData) {
            setContent(appendixData?.data?.content);
            form.setFieldsValue({
                title: appendixData?.data.title,
                addendumTypeId: appendixData?.data?.addendumType.addendumTypeId,
                content: appendixData?.data?.content,
                effectiveDate: dayjs(new Date(
                    appendixData?.data.effectiveDate[0],
                    appendixData?.data.effectiveDate[1] - 1,
                    appendixData?.data.effectiveDate[2],
                    appendixData?.data.effectiveDate[3],
                    appendixData?.data.effectiveDate[4]
                )),
            });
            setLoadingData(false);
        }
    }, [appendixData]);

    function debounce(func, wait) {
        let timeout;
        return function (...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), wait);
        };
    }

    const onValueChange = useCallback(debounce((value) => {
        setContent(value);
        form.setFieldsValue({ contractContent: value });
    }, 100), []);

    const onValueChangeSell = useCallback(debounce((value) => {
        setContentSell(value);
        form.setFieldsValue({ content: value });
    }, 100), []);


    const handleSelectChange = (newValues) => {
        form.setFieldsValue({ generalTerms: newValues });
    };


    const loadGenaralData = async ({ page, size, keyword }) => {
        return getGeneralTerms({ page, size, keyword, typeTermIds: 9, order: 'desc' }).unwrap();
    };

    const generateAppendixTitle = () => {
        if (!selectedTypes.length) return '';

        const typeNames = {
            'extend': 'Phụ lục gia hạn hợp đồng',
            'edit': editOptions.cost && editOptions.terms
                ? 'Phụ lục chỉnh sửa hợp đồng (Chi phí và Điều khoản)'
                : editOptions.cost
                    ? 'Chỉnh sửa hợp đồng (Chi phí)'
                    : editOptions.terms
                        ? 'Chỉnh sửa hợp đồng (Điều khoản)'
                        : 'Chỉnh sửa hợp đồng',
            'liquidate': 'Phụ lục thanh lý hợp đồng'
        };

        const selectedTypeNames = selectedTypes.map(type => typeNames[type]).join(' và ');
        return `${selectedTypeNames}`;
    };

    useEffect(() => {
        if (isTitleAutoGenerated && selectedTypes.length > 0) {
            const newTitle = generateAppendixTitle();
            form.setFieldsValue({ title: newTitle });
        }
    }, [selectedTypes, form.getFieldValue('contractId')]);

    const handleCheckboxChange = (checkedValues) => {
        setErrorMessage('');
        if (checkedValues.length > 1) {
            const latestChecked = checkedValues[checkedValues.length - 1];
            setSelectedTypes([latestChecked]);
        } else {
            setSelectedTypes(checkedValues);
        }
        setIsTitleAutoGenerated(true);
        if (checkedValues.includes('liquidate')) {
            setEditOptions({ cost: false, terms: false });
        }
    };


    const handleEditOptionChange = (option, checked) => {
        setEditOptions(prev => ({ ...prev, [option]: checked }));
    };

    const handleClauseCheckboxChange = (checkedValues) => {
        setSelectedOthersTerms(checkedValues);
        const currentFields = form.getFieldsValue();
        const newFields = {};

        checkedValues.forEach((value) => {
            newFields[value] = currentFields[value] || { Common: [], A: [], B: [] };
        });

        form.setFieldsValue({ ...currentFields, ...newFields });
    };

    const handleSelectOthersTermsChange = (newValues) => {
        form.setFieldsValue({ otherTerms: newValues });
    };


    const handleTitleChange = (e) => {
        setIsTitleAutoGenerated(false);
        form.setFieldsValue({ title: e.target.value });
    };

    const onFinish = async (values) => {
        try {
            await form.validateFields();

            // Check if at least one appendix type is selected
            if (selectedTypes?.length === 0) {
                message.error('Vui lòng chọn ít nhất một loại phụ lục!');
                return;
            }

            // Calculate total value of contract items
            const contractItems = form.getFieldValue('contractItems') || [];
            const totalContractItemsValue = contractItems.reduce((sum, item) => sum + (Number(item.amount) || 0), 0);

            // Calculate total value of payments
            const payments = form.getFieldValue('payments') || [];
            const totalPaymentsValue = payments.reduce((sum, payment) => sum + (Number(payment.amount) || 0), 0);

            // Check if totals match
            if (Math.abs(totalContractItemsValue - totalPaymentsValue) > 0.01) {
                message.error(`Tổng số tiền các hạng mục (${new Intl.NumberFormat('vi-VN').format(totalContractItemsValue)} VND) phải bằng tổng số tiền các đợt thanh toán (${new Intl.NumberFormat('vi-VN').format(totalPaymentsValue)} VND)!`);
                return;
            }

            const data = form.getFieldsValue(true);

            const additionalConfig = Object.keys(data)
                .filter(key => !isNaN(key))
                .reduce((acc, key) => {
                    const { A, B, Common } = data[key];
                    if (A?.length > 0 || B?.length > 0 || Common?.length > 0) {
                        acc[key] = {
                            ...(A?.length > 0 && { A: A.map(id => ({ id })) }),
                            ...(B?.length > 0 && { B: B.map(id => ({ id })) }),
                            ...(Common?.length > 0 && { Common: Common.map(id => ({ id })) }),
                        };
                    }
                    return acc;
                }, {});


            const appendixData = {
                ...values,
                ...(contractId ? { contractId } : {}),
                selectedTypes,
                additionalConfig
            };
            // console.log(appendixData);
            try {
                if (appendixId) {
                    const result = await updateAppendix({ appendixId: appendixId, ...appendixData });
                    if (result.error?.originalStatus === 200) {
                        message.success('Phụ lục đã được cập nhật thành công!');
                        navigate('/appendix');
                    }
                } else {
                    const result = await createAppendix(appendixData).unwrap();
                    if (result.status === 'CREATED') {
                        message.success('Phụ lục đã được tạo thành công!');
                        navigate('/appendix');
                        form.resetFields();
                    }
                }
            } catch (error) {
                message.error(error?.data?.message || 'Đã có lỗi xảy ra. Vui lòng thử lại sau!');
            }
        } catch (errorInfo) {
            console.log(errorInfo);
            const errorMessages = errorInfo.errorFields.map(field => field.errors[0]).join(' và ');
            message.error(errorMessages);
        }
    };

    // Thêm xử lý khi thay đổi contract
    useEffect(() => {
        if (contractId && contracts?.data?.content) {
            const selectedContract = contracts.data.content.find(c => c.id === contractId);
            if (selectedContract) {
                form.setFieldsValue({
                    contractNumber: selectedContract.contractNumber
                });
            }
        }
    }, [contractId, contracts]);

    // Thêm xử lý khi thay đổi totalValue
    useEffect(() => {
        if (selectedTypes.includes('cost')) {
            const contractItems = form.getFieldValue('contractItems') || [];
            const totalValue = contractItems.reduce((sum, item) => sum + (Number(item.value) || 0), 0);
            form.setFieldsValue({ totalValue });
        }
    }, [form.getFieldValue('contractItems')]);

    // Thêm validation cho form
    const validateForm = async () => {
        try {
            const values = await form.validateFields();
            if (!selectedTypes.length) {
                setErrorMessage('Vui lòng chọn ít nhất một loại phụ lục');
                return false;
            }
            return true;
        } catch (error) {
            setErrorMessage('Vui lòng kiểm tra lại thông tin đã nhập');
            return false;
        }
    };

    const loadLegalData = async ({ page, size, keyword }) => {
        return getContractLegal({ page, size, keyword }).unwrap();
    };

    const loadDKBSData = async ({ page, size, keyword }) => {
        return getGeneralTerms({ page, size, keyword, typeTermIds: 1, order: 'desc' }).unwrap();
    };

    const loadQVNVCBData = async ({ page, size, keyword }) => {
        return getGeneralTerms({ page, size, keyword, typeTermIds: 2, order: 'desc' }).unwrap();
    };

    const loadBHVBTData = async ({ page, size, keyword }) => {
        return getGeneralTerms({ page, size, keyword, typeTermIds: 3, order: 'desc' }).unwrap();
    };

    const loadVPBTTHData = async ({ page, size, keyword }) => {
        return getGeneralTerms({ page, size, keyword, typeTermIds: 4, order: 'desc' }).unwrap();
    };

    const loadDKKata = async ({ page, size, keyword }) => {
        return getGeneralTerms({ page, size, keyword, typeTermIds: 10, order: 'desc' }).unwrap();
    };

    const loadCDHDData = async ({ page, size, keyword }) => {
        return getGeneralTerms({ page, size, keyword, typeTermIds: 5, order: 'desc' }).unwrap();
    };

    const loadGQTCData = async ({ page, size, keyword }) => {
        return getGeneralTerms({ page, size, keyword, typeTermIds: 6, order: 'desc' }).unwrap();
    };

    const loadBMData = async ({ page, size, keyword }) => {
        return getGeneralTerms({ page, size, keyword, typeTermIds: 7, order: 'desc' }).unwrap();
    };

    const handleOpenModalAddClause = (clauseId) => {
        setIsAddClauseModalOpen(true)
        setIsAddClauseId(clauseId)
    }
    const termConfigs = {
        "1": { title: "ĐIỀU KHOẢN BỔ SUNG", loadData: loadDKBSData },
        "2": { title: "QUYỀN VÀ NGHĨA VỤ CÁC BÊN", loadData: loadQVNVCBData },
        "3": { title: "ĐIỀU KHOẢN BẢO HÀNH VÀ BẢO TRÌ", loadData: loadBHVBTData },
        "4": { title: "ĐIỀU KHOẢN VI PHẠM VÀ BỒI THƯỜNG THIỆT HẠI", loadData: loadVPBTTHData },
        "5": { title: "ĐIỀU KHOẢN VỀ CHẤM DỨT HỢP ĐỒNG", loadData: loadCDHDData },
        "6": { title: "ĐIỀU KHOẢN VỀ GIẢI QUYẾT TRANH CHẤP", loadData: loadGQTCData },
        "7": { title: "ĐIỀU KHOẢN BẢO MẬT", loadData: loadBMData },
    };



    const handleChange = (value) => {
        if (value) {
            setTextValue(numberToVietnamese(value));
        } else {
            setTextValue("");
        }
    };

    useEffect(() => {
        if (contractDetailData) {
            setContent(contractDetailData?.data.contractContent);
            setSelectedOthersTerms(contractDetailData?.data.additionalTerms?.map(term => term.original_term_id));
            if (selectedTypes.includes('extend') && contractDetailData?.data?.expiryDate) {
                const generalTerms = contractDetailData?.data.generalTerms.map(term => term.original_term_id);

                const [year, month, day, hour, minute] = contractDetailData.data.expiryDate;
                const dateString = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}T${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}:00`;
                const expiryDate = dayjs(dateString);
                const now = dayjs();
                setContractExpiryDate(expiryDate);
                let extendStart = expiryDate.add(1, 'day');
                // Nếu extendStart đã nhỏ hơn now (quá khứ), dùng now
                if (extendStart.isBefore(now, 'day')) {
                    extendStart = now;
                }

                // 3. Tính ngày kết thúc gia hạn: extendStart + 1 năm
                const extendEnd = extendStart.add(1, 'year');


                const totalValue = contractDetailData?.data.amount || contractDetailData?.data.contractItems.reduce((sum, item) => sum + item.amount, 0);
                const payments = contractDetailData?.data.paymentSchedules.map(schedule => {
                    const [year, month, day, hour, minute] = schedule.paymentDate;
                    const dateString = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}T${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}:00`;
                    return {
                        amount: schedule.amount,
                        // paymentDate: dayjs(dateString),
                        paymentMethod: schedule.paymentMethod,
                    };
                });


                form.setFieldsValue({
                    extendDateRange: [extendStart, extendEnd],
                    extendContractDate: extendStart,
                    contractExpirationDate: extendEnd,
                    contractItems: contractDetailData?.data.contractItems?.map((item, index) => ({
                        id: item.id,
                        amount: item.amount,
                        description: item.description,
                        itemOrder: item.itemOrder
                    })) || [],
                    totalValue,
                    payments,
                    generalTerms,
                    additionalTerms: contractDetailData?.data.additionalTerms?.map(term => term.original_term_id) || [],
                    "1": {
                        A: contractDetailData?.data.additionalConfig?.["1"]?.A?.map(item => item.original_term_id) || [],
                        B: contractDetailData?.data.additionalConfig?.["1"]?.B?.map(item => item.original_term_id) || [],
                        Common: contractDetailData?.data.additionalConfig?.["1"]?.Common?.map(item => item.original_term_id) || []
                    },
                    "2": {
                        A: contractDetailData?.data.additionalConfig?.["2"]?.A?.map(item => item.original_term_id) || [],
                        B: contractDetailData?.data.additionalConfig?.["2"]?.B?.map(item => item.original_term_id) || [],
                        Common: contractDetailData?.data.additionalConfig?.["2"]?.Common?.map(item => item.original_term_id) || []
                    },
                    "3": {
                        A: contractDetailData?.data.additionalConfig?.["3"]?.A?.map(item => item.original_term_id) || [],
                        B: contractDetailData?.data.additionalConfig?.["3"]?.B?.map(item => item.original_term_id) || [],
                        Common: contractDetailData?.data.additionalConfig?.["3"]?.Common?.map(item => item.original_term_id) || []
                    },
                    "4": {
                        A: contractDetailData?.data.additionalConfig?.["4"]?.A?.map(item => item.original_term_id) || [],
                        B: contractDetailData?.data.additionalConfig?.["4"]?.B?.map(item => item.original_term_id) || [],
                        Common: contractDetailData?.data.additionalConfig?.["4"]?.Common?.map(item => item.original_term_id) || []
                    },
                    "5": {
                        A: contractDetailData?.data.additionalConfig?.["5"]?.A?.map(item => item.original_term_id) || [],
                        B: contractDetailData?.data.additionalConfig?.["5"]?.B?.map(item => item.original_term_id) || [],
                        Common: contractDetailData?.data.additionalConfig?.["5"]?.Common?.map(item => item.original_term_id) || []
                    },
                    "6": {
                        A: contractDetailData?.data.additionalConfig?.["6"]?.A?.map(item => item.original_term_id) || [],
                        B: contractDetailData?.data.additionalConfig?.["6"]?.B?.map(item => item.original_term_id) || [],
                        Common: contractDetailData?.data.additionalConfig?.["6"]?.Common?.map(item => item.original_term_id) || []
                    },
                    "7": {
                        A: contractDetailData?.data.additionalConfig?.["7"]?.A?.map(item => item.original_term_id) || [],
                        B: contractDetailData?.data.additionalConfig?.["7"]?.B?.map(item => item.original_term_id) || [],
                        Common: contractDetailData?.data.additionalConfig?.["7"]?.Common?.map(item => item.original_term_id) || []
                    },
                });
            }

            // Chỉnh sửa chi phí thanh toán
            // if (selectedTypes.includes('edit') && editOptions.cost) {
            //     const [year, month, day, hour, minute] = contractDetailData.data.expiryDate;
            //     const [yearE, monthE, dayE, hourE, minuteE] = contractDetailData.data.effectiveDate;
            //     const dateString = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}T${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}:00`;
            //     const dateStringE = `${yearE}-${monthE.toString().padStart(2, '0')}-${dayE.toString().padStart(2, '0')}T${hourE.toString().padStart(2, '0')}:${minuteE.toString().padStart(2, '0')}:00`;
            //     const expiryDate = dayjs(dateString);
            //     const effectiveDate = dayjs(dateStringE);
            //     const totalValue = contractDetailData?.data.amount || contractDetailData?.data.contractItems.reduce((sum, item) => sum + item.amount, 0);
            //     const payments = contractDetailData?.data.paymentSchedules.map(schedule => {
            //         const [year, month, day, hour, minute] = schedule.paymentDate;
            //         const dateString = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}T${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}:00`;
            //         return {
            //             amount: schedule.amount,
            //             paymentDate: dayjs(dateString),
            //             paymentMethod: schedule.paymentMethod,
            //             notifyPaymentDate: schedule.notifyPaymentDate ? dayjs(new Date(
            //                 schedule.notifyPaymentDate[0],
            //                 schedule.notifyPaymentDate[1] - 1,
            //                 schedule.notifyPaymentDate[2],
            //                 schedule.notifyPaymentDate[3],
            //                 schedule.notifyPaymentDate[4]
            //             ))
            //                 : null,
            //         };
            //     });
            //     form.setFieldsValue({
            //         contractItems: contractDetailData?.data.contractItems?.map((item, index) => ({
            //             id: item.id,
            //             amount: item.amount,
            //             description: item.description,
            //             itemOrder: item.itemOrder,

            //         })) || [],
            //         totalValue,
            //         payments,
            //         extendDateRange: [
            //             effectiveDate,
            //             expiryDate,
            //         ],
            //         extendContractDate: effectiveDate,
            //         contractExpirationDate: expiryDate,
            //     });
            // }

            // Chỉnh sửa nội dung điều khoản
            if (selectedTypes.includes('edit') ) {
                const generalTerms = contractDetailData?.data.generalTerms.map(term => term.original_term_id);


                form.setFieldsValue({
                    contractContent: contractDetailData?.data.contractContent,
                    generalTerms,
                    additionalTerms: contractDetailData?.data.additionalTerms?.map(term => term.original_term_id) || [],
                    "1": {
                        A: contractDetailData?.data.additionalConfig?.["1"]?.A?.map(item => item.original_term_id) || [],
                        B: contractDetailData?.data.additionalConfig?.["1"]?.B?.map(item => item.original_term_id) || [],
                        Common: contractDetailData?.data.additionalConfig?.["1"]?.Common?.map(item => item.original_term_id) || []
                    },
                    "2": {
                        A: contractDetailData?.data.additionalConfig?.["2"]?.A?.map(item => item.original_term_id) || [],
                        B: contractDetailData?.data.additionalConfig?.["2"]?.B?.map(item => item.original_term_id) || [],
                        Common: contractDetailData?.data.additionalConfig?.["2"]?.Common?.map(item => item.original_term_id) || []
                    },
                    "3": {
                        A: contractDetailData?.data.additionalConfig?.["3"]?.A?.map(item => item.original_term_id) || [],
                        B: contractDetailData?.data.additionalConfig?.["3"]?.B?.map(item => item.original_term_id) || [],
                        Common: contractDetailData?.data.additionalConfig?.["3"]?.Common?.map(item => item.original_term_id) || []
                    },
                    "4": {
                        A: contractDetailData?.data.additionalConfig?.["4"]?.A?.map(item => item.original_term_id) || [],
                        B: contractDetailData?.data.additionalConfig?.["4"]?.B?.map(item => item.original_term_id) || [],
                        Common: contractDetailData?.data.additionalConfig?.["4"]?.Common?.map(item => item.original_term_id) || []
                    },
                    "5": {
                        A: contractDetailData?.data.additionalConfig?.["5"]?.A?.map(item => item.original_term_id) || [],
                        B: contractDetailData?.data.additionalConfig?.["5"]?.B?.map(item => item.original_term_id) || [],
                        Common: contractDetailData?.data.additionalConfig?.["5"]?.Common?.map(item => item.original_term_id) || []
                    },
                    "6": {
                        A: contractDetailData?.data.additionalConfig?.["6"]?.A?.map(item => item.original_term_id) || [],
                        B: contractDetailData?.data.additionalConfig?.["6"]?.B?.map(item => item.original_term_id) || [],
                        Common: contractDetailData?.data.additionalConfig?.["6"]?.Common?.map(item => item.original_term_id) || []
                    },
                    "7": {
                        A: contractDetailData?.data.additionalConfig?.["7"]?.A?.map(item => item.original_term_id) || [],
                        B: contractDetailData?.data.additionalConfig?.["7"]?.B?.map(item => item.original_term_id) || [],
                        Common: contractDetailData?.data.additionalConfig?.["7"]?.Common?.map(item => item.original_term_id) || []
                    },
                });

            }
        }
    }, [contractDetailData, form, selectedTypes, editOptions]);

    // Cột cho bảng hạng mục thanh toán
    const columns = [
        {
            title: 'STT',
            dataIndex: 'index',
            key: 'index',
            render: (text, record, index) => index + 1,
        },
        {
            title: 'Nội dung',
            dataIndex: 'description',
            key: 'description',
            render: (text, record, index) => (
                <Form.Item
                    name={[index, 'description']}
                    rules={[{ required: true, whitespace: true, message: 'Vui lòng nhập nội dung' }]}
                    noStyle
                >
                    <Input.TextArea placeholder="Nhập nội dung" rows={2} />
                </Form.Item>

            ),
        },
        {
            title: 'Giá tiền',
            dataIndex: 'amount',
            key: 'amount',
            render: (text, record, index) => (
                <Form.Item
                    name={[index, 'amount']}
                    rules={[
                        { required: true, message: 'Vui lòng nhập giá tiền' },

                    ]}

                    noStyle
                >
                    <InputNumber
                        style={{ width: '100%' }}
                        placeholder="Nhập giá tiền"
                        min={0}
                        max={100000000000}
                        onChange={(value) => {
                            if (value > 100000000000) {
                                message.warning('Giá tiền không được vượt quá 100 tỷ');
                            }
                        }}
                        formatter={(value) =>
                            value ? `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',') + ' ₫' : ''
                        }
                        parser={(value) => value.replace(/\D/g, '')}
                    />
                </Form.Item>
            ),
        },
        {
            title: 'Hành động',
            key: 'action',
            render: (text, record, index) => (
                <Button type="primary" onClick={() => remove(index)} danger>
                    <DeleteFilled />
                </Button>
            ),
        },
    ];

    if (isLoadingAppendix || isLoadingContracts) {
        return (
            <div className='min-h-[100vh] flex justify-center items-center'>
                <Skeleton active />
            </div>
        )
    }

    return (
        <div className={`min-h-screen p-8 ${isDarkMode ? 'bg-[#141414]' : ''}`}>
            <div className={`max-w-4xl mx-auto ${isDarkMode ? 'bg-[#1f1f1f]' : 'bg-[#f5f5f5] border'} shadow-lg rounded-lg p-6`}>
                <h1 className="text-3xl font-bold mb-6 text-center">
                    TẠO PHỤ LỤC HỢP ĐỒNG
                </h1>

                {errorMessage && (
                    <div className="mb-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded">
                        {errorMessage}
                    </div>
                )}
                <Form
                    form={form}
                    onFinishFailed={(errorInfo) => {
                        // console.log(errorInfo);
                        const errorMessages = errorInfo.errorFields.map(field => field.errors[0]).join(' và ');
                        message.error(errorMessages);
                    }}
                    layout="vertical"
                    onFinish={onFinish}
                    onValuesChange={(changedValues, allValues) => {
                        if (changedValues.contractItems) {
                            console.log(changedValues.contractItems)
                            const total = (allValues.contractItems || []).reduce(
                                (sum, item) => sum + (item.amount || 0),
                                0
                            );
                            // console.log(total)
                            handleChange(total)
                            form.setFieldsValue({ totalValue: total });
                        }
                    }}
                    initialValues={{
                        contractItems: [{ description: '', amount: null }],
                    }}
                >
                    {!contractId && !appendixId && (
                        <Form.Item
                            label="Hợp Đồng"
                            name="contractId"
                            rules={[{ required: true, message: "Vui lòng chọn hợp đồng!" }]}
                        >
                            {contracts?.data.content.length > 0 ? (
                                <Select placeholder="Chọn hợp đồng">
                                    {contracts.data.content.map((contract) => (
                                        <Option key={contract.id} value={contract.id}>
                                            {contract.title}
                                        </Option>
                                    ))}
                                </Select>
                            ) : (
                                <p>Không có hợp đồng nào khả dụng.</p>
                            )}
                        </Form.Item>
                    )}
                    <Form.Item
                        label={
                            <div className="flex items-center gap-2">
                                <span>Loại Phụ Lục</span>
                                {/* <Popover
                                    content="Lưu ý: Thanh lý hợp đồng không thể kết hợp với các loại phụ lục khác"
                                    trigger="hover"
                                >
                                    <InfoCircleOutlined className="text-blue-500" />
                                </Popover> */}
                            </div>
                        }
                    >
                        <Checkbox.Group onChange={handleCheckboxChange} className="flex flex-col gap-1">
                            <Checkbox
                                value="extend"
                                disabled={selectedTypes.length > 0 && !selectedTypes.includes('extend')}
                            >
                                <span className={selectedTypes.length > 0 && !selectedTypes.includes('extend') ? 'text-gray-400' : ''}>
                                    Gia hạn hợp đồng
                                </span>
                            </Checkbox>
                            {/* <Checkbox
                                value="liquidate"
                                disabled={selectedTypes.length > 0 && !selectedTypes.includes('liquidate')}
                            >
                                <span className={selectedTypes.length > 0 && !selectedTypes.includes('liquidate') ? 'text-gray-400' : ''}>
                                    Thanh lý hợp đồng
                                </span>
                            </Checkbox> */}
                            <Checkbox
                                value="edit"
                                disabled={selectedTypes.length > 0 && !selectedTypes.includes('edit')}
                            >
                                <span className={selectedTypes.length > 0 && !selectedTypes.includes('edit') ? 'text-gray-400' : ''}>
                                    Chỉnh sửa hợp đồng
                                </span>
                            </Checkbox>
                        </Checkbox.Group>

                        {/* Hiển thị các tùy chọn con khi edit được chọn */}
                        {/* {selectedTypes.includes('edit') && (
                            <div className="ml-4 flex flex-col gap-2 mt-4">
                                <Checkbox
                                    onChange={(e) => handleEditOptionChange('cost', e.target.checked)}
                                    checked={editOptions.cost}
                                >
                                    Thay đổi chi phí và thời gian hiệu lực
                                </Checkbox>
                                <Checkbox
                                    onChange={(e) => handleEditOptionChange('terms', e.target.checked)}
                                    checked={editOptions.terms}
                                >
                                    Thay đổi nội dung và điều khoản
                                </Checkbox>
                            </div>
                        )} */}


                    </Form.Item>
                    <Form.Item
                        label="Tên Phụ Lục"
                        name="title"
                        rules={[{ required: true, whitespace: true, message: 'Vui lòng nhập tên phụ lục!' }]}
                    >
                        <Input
                            placeholder="Nhập tên phụ lục"
                            onChange={handleTitleChange}
                            addonAfter={
                                <Button
                                    type="text"
                                    onClick={() => {
                                        setIsTitleAutoGenerated(true);
                                        form.setFieldsValue({ title: generateAppendixTitle() });
                                    }}
                                >
                                    Tự động
                                </Button>
                            }
                        />
                    </Form.Item>


                    {selectedTypes.includes('extend') && (
                        <>
                            <Form.Item
                                label="Thời gian gia hạn hợp đồng"
                                name="extendDateRange"
                                rules={[
                                    { required: true, message: 'Vui lòng chọn thời gian gia hạn hợp đồng!' },
                                    ({ getFieldValue }) => ({
                                        validator(_, value) {
                                            if (!value || value.length !== 2) {
                                                return Promise.resolve();
                                            }
                                            const [startDate, endDate] = value;
                                            if (endDate.isBefore(startDate)) {
                                                return Promise.reject(new Error('Ngày kết thúc gia hạn phải sau ngày bắt đầu!'));
                                            }
                                            return Promise.resolve();
                                        },
                                    }),
                                ]}
                            >
                                <DatePicker.RangePicker
                                    className="w-full"
                                    showTime={{ format: 'HH:mm' }}
                                    format="DD/MM/YYYY HH:mm"
                                    placeholder={["Ngày bắt đầu gia hạn", "Ngày kết thúc gia hạn"]}
                                    disabledDate={(current) => {
                                        if (!current || !contractExpiryDate) return false;
                                        const nextDay = contractExpiryDate.add(1, 'day').startOf('day');
                                        return current < nextDay;
                                    }}
                                    onChange={(dates) => {
                                        if (dates) {
                                            form.setFieldsValue({
                                                extendContractDate: dates[0],
                                                contractExpirationDate: dates[1],
                                            });
                                        } else {
                                            form.setFieldsValue({
                                                extendContractDate: null,
                                                contractExpirationDate: null,
                                            });
                                        }
                                    }}
                                />
                            </Form.Item>
                            <Form.Item name="extendContractDate" hidden rules={[{ required: true, message: "Vui lòng chọn ngày bắt đầu gia hạn!" }]} />
                            <Form.Item name="contractExpirationDate" hidden rules={[{ required: true, message: "Vui lòng chọn ngày kết thúc gia hạn!" }]} />
                            <Divider orientation="center" className="text-lg">Hạng mục thanh toán</Divider>
                            <Form.List
                                name="contractItems"
                            // rules={[
                            //     {
                            //         validator: async (_, contractItems) => {
                            //             if (!contractItems || contractItems.length < 1) {
                            //                 return Promise.reject(new Error('Phải có ít nhất một hạng mục'));
                            //             }
                            //         },
                            //     },
                            // ]}
                            >
                                {(fields, { add, remove }) => {
                                    window.remove = remove;
                                    return (
                                        <>
                                            <Table
                                                dataSource={fields}
                                                columns={columns}
                                                pagination={false}
                                                rowKey={(record) => record.key}
                                            />
                                            <Button type="primary" onClick={() => add()} style={{ marginTop: 16 }}>
                                                <PlusOutlined /> Thêm hạng mục
                                            </Button>
                                        </>
                                    );
                                }}
                            </Form.List>

                            <div className="mt-4    ">
                                <Form.Item name="totalValue" label="Tổng giá trị hợp đồng">
                                    <InputNumber
                                        style={{ width: '100%' }}
                                        readOnly
                                        formatter={(value) =>
                                            value ? `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',') + ' ₫' : ''
                                        }
                                    />
                                </Form.Item>
                                {textValue && (
                                    <div className="mt-1 ml-1" >
                                        <Typography.Text type="secondary">
                                            (Bằng chữ: <span className="font-bold">{textValue}</span>)
                                        </Typography.Text>
                                    </div>
                                )}
                            </div>

                            <Divider orientation="center">Thanh toán</Divider>
                            <Form.List
                                name="payments"
                                rules={[
                                    {
                                        validator: async (_, payments) => {
                                            // if (!payments || payments.length < 1) {
                                            //     return Promise.reject(new Error('Vui lòng thêm ít nhất một đợt thanh toán!'));
                                            // }

                                            const totalValue = form.getFieldValue('totalValue');
                                            // if (!totalValue) {
                                            //     return Promise.reject(new Error('Vui lòng nhập các hạng mục thanh toán trước!'));
                                            // }

                                            const totalPayments = payments.reduce((sum, payment) => {
                                                return sum + (Number(payment.amount) || 0);
                                            }, 0);

                                            if (Math.abs(totalPayments - totalValue) > 0.01) {
                                                return Promise.reject(
                                                    new Error(
                                                        `Tổng số tiền các đợt thanh toán (${new Intl.NumberFormat('vi-VN').format(totalPayments)} VND) phải bằng tổng giá trị hợp đồng (${new Intl.NumberFormat('vi-VN').format(totalValue)} VND)!`
                                                    )
                                                );
                                            }
                                        },
                                    },
                                ]}
                            >
                                {(fields, { add, remove }) => (
                                    <>
                                        {fields.map(({ key, name, ...restField }) => (
                                            <Space key={key} align="baseline" className="flex mb-4 items-center w-full">
                                                <Form.Item
                                                    {...restField}
                                                    name={[name, "amount"]}
                                                    rules={[{ required: true, message: "Nhập số tiền thanh toán" }]}
                                                >
                                                    <InputNumber
                                                        style={{ width: "100%" }}
                                                        placeholder="Số tiền"
                                                        min={0}
                                                        formatter={(value) =>
                                                            value ? `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',') + ' ₫' : ''
                                                        }
                                                        parser={(value) => value.replace(/\D/g, '')}
                                                    />
                                                </Form.Item>

                                                <Form.Item
                                                    {...restField}
                                                    name={[name, "paymentDate"]}
                                                    rules={[
                                                        { required: true, message: "Chọn ngày thanh toán" },
                                                        {
                                                            validator: (_, value) => {
                                                                const extendStart = form.getFieldValue("extendContractDate");
                                                                const extendEnd = form.getFieldValue("contractExpirationDate");
                                                                const notifyPaymentDate = form.getFieldValue(["payments", name, "notifyPaymentDate"]);
                                                                // Nếu chưa chọn thời gian gia hạn hoặc ngày thanh toán, không kiểm tra
                                                                if (!extendStart || !extendEnd || !value) {
                                                                    return Promise.resolve();
                                                                }

                                                                // Kiểm tra xem ngày thanh toán có nằm trong khoảng thời gian gia hạn hay không
                                                                if (value.isBefore(extendStart) || value.isAfter(extendEnd)) {
                                                                    return Promise.reject(new Error("Ngày thanh toán phải nằm trong thời gian gia hạn"));
                                                                }
                                                                if (notifyPaymentDate && value.isBefore(notifyPaymentDate)) {
                                                                    return Promise.reject(new Error("Ngày thanh toán phải sau ngày thông báo thanh toán"));
                                                                }
                                                                return Promise.resolve();
                                                            },
                                                            dependencies: ["extendContractDate", "contractExpirationDate", ["payments", name, "notifyPaymentDate"]],
                                                        },
                                                    ]}
                                                >
                                                    <DatePicker
                                                        style={{ width: 150 }}
                                                        placeholder="Ngày thanh toán"
                                                        disabledDate={(current) => current && current < dayjs().startOf('day')}
                                                        format="DD/MM/YYYY"
                                                    />
                                                </Form.Item>

                                                <Form.Item
                                                    {...restField}
                                                    name={[name, "notifyPaymentDate"]}
                                                    rules={[
                                                        { required: true, message: "Chọn ngày thông báo thanh toán" },
                                                        {
                                                            validator: (_, value) => {
                                                                const extendStart = form.getFieldValue("extendContractDate");
                                                                const extendEnd = form.getFieldValue("contractExpirationDate");
                                                                const paymentDate = form.getFieldValue(["payments", name, "paymentDate"]);

                                                                // Skip validation if the date or extension period is not set
                                                                if (!value || !extendStart || !extendEnd) {
                                                                    return Promise.resolve();
                                                                }

                                                                // Check if notifyPaymentDate is within the extension period
                                                                if (value.isBefore(extendStart) || value.isAfter(extendEnd)) {
                                                                    return Promise.reject(new Error("Ngày thông báo thanh toán phải nằm trong thời gian gia hạn"));
                                                                }

                                                                // Check if notifyPaymentDate is before paymentDate (if set)
                                                                if (paymentDate && !(value.isBefore(paymentDate) || value.isSame(paymentDate))) {
                                                                    return Promise.reject(new Error("Ngày thông báo thanh toán phải trước hoặc cùng ngày với ngày thanh toán"));
                                                                }

                                                                return Promise.resolve();
                                                            },
                                                            // Re-validate when these fields change
                                                            dependencies: ["extendContractDate", "contractExpirationDate", ["payments", name, "paymentDate"]],
                                                        },
                                                    ]}
                                                >
                                                    <DatePicker
                                                        style={{ width: 150 }}
                                                        showTime
                                                        placeholder="Ngày thông báo thanh toán"
                                                        disabledDate={(current) => current && current < dayjs().startOf('day')}
                                                        format="DD/MM/YYYY"
                                                    />
                                                </Form.Item>
                                                <Form.Item
                                                    {...restField}
                                                    name={[name, "paymentMethod"]}
                                                    rules={[{ required: true, message: "Chọn phương thức thanh toán" }]}
                                                >
                                                    <Select placeholder="Phương thức thanh toán" style={{ width: 200 }}>
                                                        <Option value="transfer">Chuyển khoản</Option>
                                                        <Option value="cash">Tiền mặt</Option>
                                                        <Option value="creditCard">Thẻ tín dụng</Option>
                                                    </Select>
                                                </Form.Item>
                                                <Form.Item>
                                                    <Button type="primary" onClick={() => remove(name)} danger>
                                                        <DeleteFilled />
                                                    </Button>
                                                </Form.Item>
                                            </Space>
                                        ))}
                                        <Button icon={<PlusOutlined />} type="primary" onClick={() => add()} block>
                                            Thêm đợt thanh toán
                                        </Button>
                                    </>
                                )}
                            </Form.List>
                            <Divider orientation="center" className="text-lg">Điều khoản & Cam kết</Divider>
                            <div className="ml-2 my-3">
                                <p className="font-bold text-[16px] mb-1">Điều khoản chung</p>
                                <p>Mô tả: (Điều khoản được áp dụng cho cả 2 bên)</p>
                            </div>

                            <Form.Item
                                label={<div className="flex justify-between items-center gap-4">
                                    <p>Điều khoản chung</p>
                                    <Popover
                                        // content={() => getTermsContent('generalTerms')}
                                        title="Danh sách Điều khoản chung đã chọn"
                                        trigger="hover"
                                        placement="right"
                                    >
                                        <Button icon={<EyeFilled />} />
                                    </Popover>
                                </div>}
                                name="generalTerms"
                                rules={[{ required: true, message: "Vui lòng chọn điều khoản chung!" }]}
                                className="ml-2"
                            >
                                <LazySelect
                                    loadDataCallback={loadGenaralData}
                                    options={generalData?.data.content}
                                    showSearch
                                    mode="multiple"
                                    placeholder="Chọn điều khoản chung"
                                    onChange={handleSelectChange}
                                    dropdownRender={(menu) => (
                                        <>
                                            {menu}
                                            <Divider style={{ margin: "8px 0" }} />
                                            <Space style={{ padding: "0 8px 4px" }}>
                                                <Button type="primary" icon={<PlusOutlined />} onClick={() => handleOpenModalAddClause(9)}>Thêm điều khoản</Button>
                                            </Space>
                                        </>
                                    )}
                                />
                            </Form.Item>

                            <Form.Item
                                label={<div className="ml-2 my-3 font-bold text-[16px] flex justify-between items-center gap-5">
                                    <p>Các điều khoản khác</p>
                                </div>}
                                name="additionalTerms"
                            >
                                <Checkbox.Group
                                    className="flex flex-col ml-4 gap-4"
                                    options={[
                                        { label: "ĐIỀU KHOẢN BỔ SUNG", value: 1 },
                                        { label: "QUYỀN VÀ NGHĨA VỤ CÁC BÊN", value: 2 },
                                        { label: "ĐIỀN KHOẢN BẢO HÀNH VÀ BẢO TRÌ", value: 3 },
                                        { label: "ĐIỀU KHOẢN VỀ VI PHẠM VÀ BỒI THƯỜNG THIỆT HẠI", value: 4 },
                                        { label: "ĐIỀU KHOẢN VỀ CHẤM DỨT HỢP ĐỒNG", value: 5 },
                                        { label: "ĐIỀU KHOẢN VỀ GIẢI QUYẾT TRANH CHẤP", value: 6 },
                                        { label: "ĐIỀU KHOẢN BẢO MẬT", value: 7 }
                                    ]}
                                    onChange={handleClauseCheckboxChange}
                                />
                            </Form.Item>

                            <div className="flex flex-col">
                                {selectedOthersTerms.map(termId => (
                                    <TermsectionForAppendix
                                        key={termId}
                                        termId={termId}
                                        title={termConfigs[termId].title}
                                        form={form}
                                        loadDataCallback={termConfigs[termId].loadData}
                                    />
                                ))}
                            </div>

                            <Divider orientation="center">Điều khoản khác</Divider>
                            <Form.Item
                                label={
                                    <div className="flex justify-between items-center gap-4">
                                        <p>Điều khoản khác </p>
                                        {/* <Popover
                                                content={() => getTermsContent('generalTerms')}
                                                title="Danh sách Điều khoản chung đã chọn"
                                                trigger="hover"
                                                placement="right"
                                            >
                                                <Button icon={<EyeFilled />} />
                                            </Popover> */}
                                    </div>
                                }
                                name="otherTerms"
                                // rules={[{ required: true, message: "Vui lòng chọn điều khoản khác!" }]}
                                className="ml-2"
                            >
                                <LazySelect
                                    loadDataCallback={loadDKKata}
                                    options={generalData?.data.content}
                                    showSearch
                                    mode="multiple"
                                    placeholder="Chọn điều khoản khác"
                                    onChange={handleSelectOthersTermsChange}
                                    dropdownRender={(menu) => (
                                        <>
                                            {menu}
                                            <Divider style={{ margin: "8px 0" }} />
                                            <Space style={{ padding: "0 8px 4px" }}>
                                                <Button type="primary" icon={<PlusOutlined />} onClick={() => handleOpenModalAddClause(10)}>
                                                    Thêm điều khoản
                                                </Button>
                                            </Space>
                                        </>
                                    )}
                                />
                            </Form.Item>
                        </>
                    )}


                    {/* {selectedTypes.includes('edit') && editOptions.cost && (
                        <>
                            <Form.Item
                                label="Thời gian hiệu lực hợp đồng"
                                name="extendDateRange"
                                rules={[
                                    { required: true, message: 'Vui lòng chọn thời gian hiệu lực hợp đồng!' },
                                    ({ getFieldValue }) => ({
                                        validator(_, value) {
                                            if (!value || value.length !== 2) {
                                                return Promise.resolve();
                                            }
                                            const [startDate, endDate] = value;
                                            if (endDate.isBefore(startDate)) {
                                                return Promise.reject(new Error('Ngày kết thúc hiệu lực phải sau ngày bắt đầu!'));
                                            }
                                            return Promise.resolve();
                                        },
                                    }),
                                ]}
                            >
                                <DatePicker.RangePicker
                                    className="w-full"
                                    showTime={{ format: 'HH:mm' }}
                                    format="DD/MM/YYYY HH:mm"
                                    placeholder={["Ngày bắt đầu hiệu lực", "Ngày kết thúc hiệu lực"]}
                                    disabledDate={(current) => {
                                        return current && current < form.getFieldValue('extendContractDate').startOf('day');
                                    }}
                                    onChange={(dates) => {
                                        if (dates) {
                                            form.setFieldsValue({
                                                extendContractDate: dates[0],
                                                contractExpirationDate: dates[1],
                                            });
                                        } else {
                                            form.setFieldsValue({
                                                extendContractDate: null,
                                                contractExpirationDate: null,
                                            });
                                        }
                                    }}
                                />
                            </Form.Item>
                            <Form.Item name="extendContractDate" hidden rules={[{ required: true, message: "Vui lòng chọn ngày bắt đầu gia hạn!" }]} />
                            <Form.Item name="contractExpirationDate" hidden rules={[{ required: true, message: "Vui lòng chọn ngày kết thúc gia hạn!" }]} />
                            <Divider orientation="center" className="text-lg">Hạng mục thanh toán</Divider>
                            <Form.List
                                name="contractItems"
                                rules={[
                                    {
                                        validator: async (_, contractItems) => {
                                            if (!contractItems || contractItems.length < 1) {
                                                return Promise.reject(new Error('Phải có ít nhất một hạng mục'));
                                            }
                                        },
                                    },
                                ]}
                            >
                                {(fields, { add, remove }) => {
                                    window.remove = remove;
                                    return (
                                        <>
                                            <Table
                                                dataSource={fields}
                                                columns={columns}
                                                pagination={false}
                                                rowKey={(record) => record.key}
                                            />
                                            <Button type="primary" onClick={() => add()} style={{ marginTop: 16 }}>
                                                <PlusOutlined /> Thêm hạng mục
                                            </Button>
                                        </>
                                    );
                                }}
                            </Form.List>

                            <div className="mt-4    ">
                                <Form.Item name="totalValue" label="Tổng giá trị hợp đồng">
                                    <InputNumber
                                        style={{ width: '100%' }}
                                        readOnly
                                        formatter={(value) =>
                                            value ? `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',') + ' ₫' : ''
                                        }
                                    />
                                </Form.Item>
                                {textValue && (
                                    <div className="mt-1 ml-1" >
                                        <Typography.Text type="secondary">
                                            (Bằng chữ: <span className="font-bold">{textValue}</span>)
                                        </Typography.Text>
                                    </div>
                                )}
                            </div>

                            <Divider orientation="center">Thanh toán</Divider>
                            <Form.List
                                name="payments"
                                rules={[
                                    {
                                        validator: async (_, payments) => {
                                            if (!payments || payments.length < 1) {
                                                return Promise.reject(new Error('Vui lòng thêm ít nhất một đợt thanh toán!'));
                                            }

                                            const totalValue = form.getFieldValue('totalValue');
                                            if (!totalValue) {
                                                return Promise.reject(new Error('Vui lòng nhập các hạng mục thanh toán trước!'));
                                            }

                                            const totalPayments = payments.reduce((sum, payment) => {
                                                return sum + (Number(payment.amount) || 0);
                                            }, 0);

                                            if (Math.abs(totalPayments - totalValue) > 0.01) {
                                                return Promise.reject(
                                                    new Error(
                                                        `Tổng số tiền các đợt thanh toán (${new Intl.NumberFormat('vi-VN').format(totalPayments)} VND) phải bằng tổng giá trị hợp đồng (${new Intl.NumberFormat('vi-VN').format(totalValue)} VND)!`
                                                    )
                                                );
                                            }
                                        },
                                    },
                                ]}
                            >
                                {(fields, { add, remove }) => (
                                    <>
                                        {fields.map(({ key, name, ...restField }) => (
                                            <Space key={key} align="baseline" className="flex mb-4 items-center w-full">
                                                <Form.Item
                                                    {...restField}
                                                    name={[name, "amount"]}
                                                    rules={[{ required: true, message: "Nhập số tiền thanh toán" }]}
                                                >
                                                    <InputNumber
                                                        style={{ width: "100%" }}
                                                        placeholder="Số tiền"
                                                        min={0}
                                                        formatter={(value) =>
                                                            value ? `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',') + ' ₫' : ''
                                                        }
                                                        parser={(value) => value.replace(/\D/g, '')}
                                                    />
                                                </Form.Item>
                                                <Form.Item
                                                    {...restField}
                                                    name={[name, "paymentDate"]}
                                                    rules={[
                                                        { required: true, message: "Chọn ngày thanh toán" },
                                                        {
                                                            validator: (_, value) => {
                                                                const extendStart = form.getFieldValue("extendContractDate");
                                                                const extendEnd = form.getFieldValue("contractExpirationDate");
                                                                const notifyPaymentDate = form.getFieldValue(["payments", name, "notifyPaymentDate"]);
                                                                // Nếu chưa chọn thời gian gia hạn hoặc ngày thanh toán, không kiểm tra
                                                                if (!extendStart || !extendEnd || !notifyPaymentDate || !value) {
                                                                    return Promise.resolve();
                                                                }

                                                                // Kiểm tra xem ngày thanh toán có nằm trong khoảng thời gian gia hạn hay không
                                                                if (value.isBefore(extendStart) || value.isAfter(extendEnd)) {
                                                                    return Promise.reject(new Error("Ngày thanh toán phải nằm trong thời gian hiệu lực"));
                                                                }
                                                                if (notifyPaymentDate && value.isBefore(notifyPaymentDate)) {
                                                                    return Promise.reject(new Error("Ngày thanh toán phải sau ngày thông báo thanh toán"));
                                                                }
                                                                return Promise.resolve();
                                                            },
                                                        },
                                                    ]}
                                                >
                                                    <DatePicker
                                                        style={{ width: 150 }}
                                                        placeholder="Ngày thanh toán"
                                                        disabledDate={(current) => current && current < dayjs().startOf('day')}
                                                        format="DD/MM/YYYY"
                                                    />
                                                </Form.Item>
                                                <Form.Item
                                                    {...restField}
                                                    name={[name, "notifyPaymentDate"]}
                                                    rules={[
                                                        { required: true, message: "Chọn ngày thông báo thanh toán" },
                                                        {
                                                            validator: (_, value) => {
                                                                const extendStart = form.getFieldValue("extendContractDate");
                                                                const extendEnd = form.getFieldValue("contractExpirationDate");
                                                                const paymentDate = form.getFieldValue(["payments", name, "paymentDate"]);

                                                                // Skip validation if the date or extension period is not set
                                                                if (!value || !extendStart || !extendEnd) {
                                                                    return Promise.resolve();
                                                                }

                                                                // Check if notifyPaymentDate is within the extension period
                                                                if (value.isBefore(extendStart) || value.isAfter(extendEnd)) {
                                                                    return Promise.reject(new Error("Ngày thông báo thanh toán phải nằm trong thời gian gia hạn"));
                                                                }

                                                                // Check if notifyPaymentDate is before paymentDate (if set)
                                                                if (paymentDate && !(value.isBefore(paymentDate) || value.isSame(paymentDate))) {
                                                                    return Promise.reject(new Error("Ngày thông báo thanh toán phải trước hoặc cùng ngày với ngày thanh toán"));
                                                                }

                                                                return Promise.resolve();
                                                            },
                                                            // Re-validate when these fields change
                                                            dependencies: ["extendContractDate", "contractExpirationDate", ["payments", name, "paymentDate"]],
                                                        },
                                                    ]}
                                                >
                                                    <DatePicker
                                                        style={{ width: 150 }}
                                                        showTime
                                                        placeholder="Ngày thông báo thanh toán"
                                                        disabledDate={(current) => current && current < dayjs().startOf('day')}
                                                        format="DD/MM/YYYY"
                                                    />
                                                </Form.Item>
                                                <Form.Item
                                                    {...restField}
                                                    name={[name, "paymentMethod"]}
                                                    rules={[{ required: true, message: "Chọn phương thức thanh toán" }]}
                                                >
                                                    <Select placeholder="Phương thức thanh toán" style={{ width: 200 }}>
                                                        <Option value="transfer">Chuyển khoản</Option>
                                                        <Option value="cash">Tiền mặt</Option>
                                                        <Option value="creditCard">Thẻ tín dụng</Option>
                                                    </Select>
                                                </Form.Item>
                                                <Form.Item>
                                                    <Button type="primary" onClick={() => remove(name)} danger>
                                                        <DeleteFilled />
                                                    </Button>
                                                </Form.Item>
                                            </Space>
                                        ))}
                                        <Button icon={<PlusOutlined />} type="primary" onClick={() => add()} block>
                                            Thêm đợt thanh toán
                                        </Button>
                                    </>
                                )}
                            </Form.List>
                        </>
                    )} */}

                    {selectedTypes.includes('edit') && (
                        <>
                            <Form.Item
                                label=" Soạn thảo nội dung hợp đồng"
                                name="contractContent"
                                className="mt-5"
                                rules={[{ required: true, whitespace: true, message: "Vui lòng nhập nội dung hợp đồng!" }]}
                            >
                                <RichTextEditor
                                    output="html"
                                    content={content}
                                    onChangeContent={onValueChange}
                                    extensions={extensions}
                                    dark={isDarkMode}
                                    hideBubble={true}
                                    dense={false}
                                    removeDefaultWrapper
                                    placeholder="Nhập nội dung hợp đồng tại đây..."
                                    contentClass="max-h-[400px] overflow-auto [&::-webkit-scrollbar]:hidden hover:[&::-webkit-scrollbar]:block [&::-webkit-scrollbar]:w-2 [&::-webkit-scrollbar-thumb]:bg-gray-500 [&::-webkit-scrollbar-track]:bg-gray-200"
                                />
                            </Form.Item>

                            <Divider orientation="center" className="text-lg">Điều khoản & Cam kết</Divider>
                            <div className="ml-2 my-3">
                                <p className="font-bold text-[16px] mb-1">Điều khoản chung</p>
                                <p>Mô tả: (Điều khoản được áp dụng cho cả 2 bên)</p>
                            </div>

                            <Form.Item
                                label={<div className="flex justify-between items-center gap-4">
                                    <p>Điều khoản chung</p>
                                    <Popover
                                        // content={() => getTermsContent('generalTerms')}
                                        title="Danh sách Điều khoản chung đã chọn"
                                        trigger="hover"
                                        placement="right"
                                    >
                                        <Button icon={<EyeFilled />} />
                                    </Popover>
                                </div>}
                                name="generalTerms"
                                rules={[{ required: true, message: "Vui lòng chọn điều khoản chung!" }]}
                                className="ml-2"
                            >
                                <LazySelect
                                    loadDataCallback={loadGenaralData}
                                    options={generalData?.data.content}
                                    showSearch
                                    mode="multiple"
                                    placeholder="Chọn điều khoản chung"
                                    onChange={handleSelectChange}
                                    dropdownRender={(menu) => (
                                        <>
                                            {menu}
                                            <Divider style={{ margin: "8px 0" }} />
                                            <Space style={{ padding: "0 8px 4px" }}>
                                                <Button type="primary" icon={<PlusOutlined />} onClick={() => handleOpenModalAddClause(9)}>Thêm điều khoản</Button>
                                            </Space>
                                        </>
                                    )}
                                />
                            </Form.Item>

                            <Form.Item
                                label={<div className="ml-2 my-3 font-bold text-[16px] flex justify-between items-center gap-5">
                                    <p>Các điều khoản khác</p>
                                </div>}
                                name="additionalTerms"
                            >
                                <Checkbox.Group
                                    className="flex flex-col ml-4 gap-4"
                                    options={[
                                        { label: "ĐIỀU KHOẢN BỔ SUNG", value: 1 },
                                        { label: "QUYỀN VÀ NGHĨA VỤ CÁC BÊN", value: 2 },
                                        { label: "ĐIỀN KHOẢN BẢO HÀNH VÀ BẢO TRÌ", value: 3 },
                                        { label: "ĐIỀU KHOẢN VỀ VI PHẠM VÀ BỒI THƯỜNG THIỆT HẠI", value: 4 },
                                        { label: "ĐIỀU KHOẢN VỀ CHẤM DỨT HỢP ĐỒNG", value: 5 },
                                        { label: "ĐIỀU KHOẢN VỀ GIẢI QUYẾT TRANH CHẤP", value: 6 },
                                        { label: "ĐIỀU KHOẢN BẢO MẬT", value: 7 }
                                    ]}
                                    onChange={handleClauseCheckboxChange}
                                />
                            </Form.Item>

                            <div className="flex flex-col">
                                {selectedOthersTerms.map(termId => (
                                    <TermsectionForAppendix
                                        key={termId}
                                        termId={termId}
                                        title={termConfigs[termId].title}
                                        form={form}
                                        loadDataCallback={termConfigs[termId].loadData}
                                    />
                                ))}
                            </div>

                            <Divider orientation="center">Điều khoản khác</Divider>
                            <Form.Item
                                label={
                                    <div className="flex justify-between items-center gap-4">
                                        <p>Điều khoản khác </p>
                                        {/* <Popover
                                                content={() => getTermsContent('generalTerms')}
                                                title="Danh sách Điều khoản chung đã chọn"
                                                trigger="hover"
                                                placement="right"
                                            >
                                                <Button icon={<EyeFilled />} />
                                            </Popover> */}
                                    </div>
                                }
                                name="otherTerms"
                                // rules={[{ required: true, message: "Vui lòng chọn điều khoản khác!" }]}
                                className="ml-2"
                            >
                                <LazySelect
                                    loadDataCallback={loadDKKata}
                                    options={generalData?.data.content}
                                    showSearch
                                    mode="multiple"
                                    placeholder="Chọn điều khoản khác"
                                    onChange={handleSelectOthersTermsChange}
                                    dropdownRender={(menu) => (
                                        <>
                                            {menu}
                                            <Divider style={{ margin: "8px 0" }} />
                                            <Space style={{ padding: "0 8px 4px" }}>
                                                <Button type="primary" icon={<PlusOutlined />} onClick={() => handleOpenModalAddClause(10)}>
                                                    Thêm điều khoản
                                                </Button>
                                            </Space>
                                        </>
                                    )}
                                />
                            </Form.Item>
                        </>
                    )}

                    {selectedTypes.includes('liquidate') && (
                        <>
                            <Form.Item
                                label=" Soạn thảo nội dung thanh lý hợp đồng"
                                name="content"
                                className="mt-5"
                                rules={[{ required: true, whitespace: true, message: "Vui lòng nhập nội dung thanh lý hợp đồng!" }]}
                            >
                                <RichTextEditor
                                    output="html"
                                    content={contentSell}
                                    onChangeContent={onValueChangeSell}
                                    extensions={extensions}
                                    dark={isDarkMode}
                                    hideBubble={true}
                                    dense={false}
                                    removeDefaultWrapper
                                    placeholder="Nhập nội dung thanh lý hợp đồng tại đây..."
                                    contentClass="max-h-[400px] overflow-auto [&::-webkit-scrollbar]:hidden hover:[&::-webkit-scrollbar]:block [&::-webkit-scrollbar]:w-2 [&::-webkit-scrollbar-thumb]:bg-gray-500 [&::-webkit-scrollbar-track]:bg-gray-200"
                                />
                            </Form.Item>


                        </>
                    )}

                    <Form.Item className="text-center mt-5">
                        <Button type="primary" htmlType="submit" className="w-1/2 " loading={LoadingUpdate || LoadingCreate}>
                            {appendixId ? 'Cập Nhật Phụ Lục' : 'Tạo Phụ Lục'}
                        </Button>
                    </Form.Item>
                </Form>
            </div>
            <ModalAdd
                clauseId={adddClauseId}
                isModalAddOpen={isAddClasueModalOpen}
                closeModalAdd={() => setIsAddClauseModalOpen(false)}
                callBackCallAPI={adddClauseId == 9 ? () => loadGenaralData({ page: 0, size: 10 }) : () => loadDKKata({ page: 0, size: 10 })}
            />
        </div >
    );
};

export default ContractAppendixPage;