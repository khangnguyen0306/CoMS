import React, { useCallback, useEffect, useState } from 'react';
import { Form, Input, Button, DatePicker, Select, message, Divider, Space, Spin, Modal, Checkbox, Table, InputNumber, Typography, Popover } from 'antd';
import { useSelector } from 'react-redux';
import dayjs from 'dayjs';
import RichTextEditor from 'reactjs-tiptap-editor';
import 'reactjs-tiptap-editor/style.css';
import 'katex/dist/katex.min.css';
import { extensions } from "../../../utils/textEditor";
import { debounce } from "lodash";
import { useCreateAppendixMutation, useCreateAppendixTypeMutation, useDeleteAppendixTypeMutation, useEditAppendixTypeMutation, useGetAllAppendixTypeQuery, useGetAppendixDetailQuery, useUpdateAppendixMutation } from '../../../services/AppendixAPI';
import { useLocation, useNavigate } from 'react-router-dom';
import { DeleteFilled, EditFilled, PlusOutlined, EyeFilled, InfoCircleOutlined } from '@ant-design/icons';
import { useGetAllContractQuery } from '../../../services/ContractAPI';
import LazySelect from '../../../hooks/LazySelect';
import { useLazyGetClauseManageQuery } from '../../../services/ClauseAPI';
import TextArea from 'antd/es/input/TextArea';
import { TermSection } from '../../../config/TermConfig';

const { Option } = Select;
const { RangePicker } = DatePicker;

const ContractAppendixPage = () => {
    const navigate = useNavigate();
    const location = useLocation();
    const queryParams = new URLSearchParams(location.search);
    const contractId = queryParams.get('contractId');
    const appendixId = queryParams.get('appendixId');
    const contractNumber = queryParams.get('contractNumber');
    const [form] = Form.useForm();
    const isDarkMode = useSelector((state) => state.theme.isDarkMode);
    const [content, setContent] = useState('');
    const [newTypeCreate, setNewTypeCreate] = useState('');
    const [loadingData, setLoadingData] = useState(true);
    const [selectedTypes, setSelectedTypes] = useState([]);
    const [isTitleAutoGenerated, setIsTitleAutoGenerated] = useState(true);
    const [selectedOthersTerms, setSelectedOthersTerms] = useState([]);
    const [errorMessage, setErrorMessage] = useState('');
    const [createAppendix, { isLoading: LoadingCreate }] = useCreateAppendixMutation();
    const [updateAppendix, { isLoading: LoadingUpdate }] = useUpdateAppendixMutation();

    const { data: appenditType, isLoading: isLoadingappendixType, refetch: refecthAppendixType } = useGetAllAppendixTypeQuery();
    const [getGeneralTerms, { data: generalData, isLoading: loadingGenaral, refetch: refetchGenaral }] = useLazyGetClauseManageQuery();
    const { data: appendixData, isLoading: isLoadingAppendix } = useGetAppendixDetailQuery({ id: appendixId }, { skip: !appendixId });
    const { data: contracts, isLoading: isLoadingContracts } = useGetAllContractQuery(
        { status: "ACTIVE" },
        { skip: !!contractId }
    );

    const [createAppendixType, { isLoading: isLoadingCreateAppendixType }] = useCreateAppendixTypeMutation();
    const [updateAppendixType, { isLoading: isLoadingUpdateAppendixType }] = useEditAppendixTypeMutation();
    const [deleteAppendixType, { isLoading: isLoadingDeleteAppendixType }] = useDeleteAppendixTypeMutation();

    // State cho modal
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
    const [currentAppendixType, setCurrentAppendixType] = useState(null);
    const [editForm] = Form.useForm();

    useEffect(() => {
        if (appendixData) {
            setContent(appendixData?.data?.content);
            form.setFieldsValue({
                title: appendixData?.data.title,
                addendumTypeId: appendixData?.data?.addendumType.addendumTypeId,
                content: appendixData?.data?.content,
                effectiveDate: dayjs(new Date(
                    appendixData?.data.effectiveDate[0],
                    appendixData?.data.effectiveDate[1] - 1,
                    appendixData?.data.effectiveDate[2],
                    appendixData?.data.effectiveDate[3],
                    appendixData?.data.effectiveDate[4]
                )),
            });
            setLoadingData(false);
        }
    }, [appendixData]);

    const onValueChange = useCallback(
        debounce((value) => {
            setContent(value);
            form.setFieldsValue({ content: value });
        }, 300),
        []
    );
    const handleSelectChange = (newValues) => {
        form.setFieldsValue({ generalTerms: newValues });
    };
    useEffect(() => {
        return () => onValueChange.cancel();
    }, []);
    const loadGenaralData = async ({ page, size, keyword }) => {
        return getGeneralTerms({ page, size, keyword, typeTermIds: 9 }).unwrap();
    };
    const onNewTypeChange = (e) => {
        setNewTypeCreate(e.target.value);
    };

    const addNewType = async () => {
        if (!newTypeCreate.trim()) return message.warning("Vui lòng nhập loại phụ lục!");
        try {
            const result = await createAppendixType({ name: newTypeCreate });
            if (result.error?.originalStatus === 200) {
                refecthAppendixType();
                setNewTypeCreate("");
                message.success("Thêm loại phụ lục thành công!");
            }
        } catch (error) {
            if (error.data === "exist") {
                message.error("Loại phụ lục đã tồn tại!");
            } else {
                message.error("Lỗi khi tạo loại phụ lục!");
            }
        }
    };

    const handleEdit = (id) => {
        const appendixType = appenditType.data.find(item => item.addendumTypeId === id);
        setCurrentAppendixType(appendixType);
        editForm.setFieldsValue({ name: appendixType.name });
        setIsEditModalVisible(true);
    };

    const handleDelete = (id) => {
        const appendixType = appenditType.data.find(item => item.addendumTypeId === id);
        setCurrentAppendixType(appendixType);
        setIsDeleteModalVisible(true);
    };

    const handleUpdate = async () => {
        try {
            const values = await editForm.validateFields();
            const result = await updateAppendixType({ id: currentAppendixType.addendumTypeId, name: values.name });
            if (result.error?.originalStatus === 200) {
                message.success("Cập nhật loại phụ lục thành công!");
                refecthAppendixType();
                setIsEditModalVisible(false);
            }
        } catch (error) {
            message.error("Lỗi khi cập nhật loại phụ lục!");
        }
    };

    const handleConfirmDelete = async () => {
        try {
            const result = await deleteAppendixType(currentAppendixType.addendumTypeId);
            if (result.data?.status === "OK") {
                message.success("Xóa loại phụ lục thành công!");
                refecthAppendixType();
                setIsDeleteModalVisible(false);
            }
        } catch (error) {
            message.error("Lỗi khi xóa loại phụ lục!");
        }
    };

    const generateAppendixTitle = () => {
        if (!selectedTypes.length) return '';

        const typeNames = {
            'extend': 'Gia hạn hợp đồng',
            'cost': 'Thay đổi chi phí',
            'terms': 'Thay đổi nội dung, điều khoản',
            'liquidate': 'Thanh lý hợp đồng'
        };

        const selectedTypeNames = selectedTypes.map(type => typeNames[type]).join(' và ');
        // const contractNumber = contracts?.data?.content?.find(c => c.id === form.getFieldValue('contractId'))?.contractNumber || '';

        return `${selectedTypeNames} -${contractNumber}`;
    };

    useEffect(() => {
        if (isTitleAutoGenerated && selectedTypes.length > 0) {
            const newTitle = generateAppendixTitle();
            form.setFieldsValue({ title: newTitle });
        }
    }, [selectedTypes, form.getFieldValue('contractId')]);

    const handleCheckboxChange = (checkedValues) => {
        setErrorMessage(''); // Reset error message khi thay đổi selection
        
        // If liquidate is selected, only allow liquidate
        if (checkedValues.includes('liquidate')) {
            setSelectedTypes(['liquidate']);
            setIsTitleAutoGenerated(true);
            return;
        }
        
        // If any other type is selected, remove liquidate if it exists
        if (selectedTypes.includes('liquidate')) {
            setSelectedTypes(checkedValues.filter(value => value !== 'liquidate'));
            setIsTitleAutoGenerated(true);
            return;
        }

        setSelectedTypes(checkedValues);
        setIsTitleAutoGenerated(true);
    };
    const handleClauseCheckboxChange = (checkedValues) => {
        setSelectedOthersTerms(checkedValues);
        const currentFields = form.getFieldsValue();
        const newFields = {};

        checkedValues.forEach((value) => {
            newFields[value] = currentFields[value] || { Common: [], A: [], B: [] };
        });

        form.setFieldsValue({ ...currentFields, ...newFields });
    };

    const handleTitleChange = (e) => {
        setIsTitleAutoGenerated(false);
        form.setFieldsValue({ title: e.target.value });
    };

    const onFinish = async (values) => {
        if (!await validateForm()) {
            return;
        }

        const appendixData = {
            ...values,
            ...(contractId ? { contractId } : {}),
            selectedTypes,
        };

        try {
            if (appendixId) {
                const result = await updateAppendix({ appendixId: appendixId, ...appendixData });
                if (result.error?.originalStatus === 200) {
                    message.success('Phụ lục đã được cập nhật thành công!');
                    navigate('/appendix');
                }
            } else {
                const result = await createAppendix(appendixData).unwrap();
                if (result.status === 'CREATED') {
                    message.success('Phụ lục đã được tạo thành công!');
                    navigate('/appendix');
                    form.resetFields();
                }
            }
        } catch (error) {
            message.error(error?.data?.message || 'Đã có lỗi xảy ra. Vui lòng thử lại sau!');
        }
    };

    // Thêm xử lý khi thay đổi contract
    useEffect(() => {
        if (contractId && contracts?.data?.content) {
            const selectedContract = contracts.data.content.find(c => c.id === contractId);
            if (selectedContract) {
                form.setFieldsValue({
                    contractNumber: selectedContract.contractNumber
                });
            }
        }
    }, [contractId, contracts]);

    // Thêm xử lý khi thay đổi totalValue
    useEffect(() => {
        if (selectedTypes.includes('cost')) {
            const contractItems = form.getFieldValue('contractItems') || [];
            const totalValue = contractItems.reduce((sum, item) => sum + (Number(item.value) || 0), 0);
            form.setFieldsValue({ totalValue });
        }
    }, [form.getFieldValue('contractItems')]);

    // Thêm validation cho form
    const validateForm = async () => {
        try {
            const values = await form.validateFields();
            if (!selectedTypes.length) {
                setErrorMessage('Vui lòng chọn ít nhất một loại phụ lục');
                return false;
            }
            return true;
        } catch (error) {
            setErrorMessage('Vui lòng kiểm tra lại thông tin đã nhập');
            return false;
        }
    };

    const loadLegalData = async ({ page, size, keyword }) => {
        return getContractLegal({ page, size, keyword }).unwrap();
    };

    const loadDKBSData = async ({ page, size, keyword }) => {
        return getGeneralTerms({ page, size, keyword, typeTermIds: 1 }).unwrap();
    };

    const loadQVNVCBData = async ({ page, size, keyword }) => {
        return getGeneralTerms({ page, size, keyword, typeTermIds: 2 }).unwrap();
    };

    const loadBHVBTData = async ({ page, size, keyword }) => {
        return getGeneralTerms({ page, size, keyword, typeTermIds: 3 }).unwrap();
    };

    const loadVPBTTHData = async ({ page, size, keyword }) => {
        return getGeneralTerms({ page, size, keyword, typeTermIds: 4 }).unwrap();
    };

    const loadCDHDData = async ({ page, size, keyword }) => {
        return getGeneralTerms({ page, size, keyword, typeTermIds: 5 }).unwrap();
    };

    const loadGQTCData = async ({ page, size, keyword }) => {
        return getGeneralTerms({ page, size, keyword, typeTermIds: 6 }).unwrap();
    };

    const loadBMData = async ({ page, size, keyword }) => {
        return getGeneralTerms({ page, size, keyword, typeTermIds: 7 }).unwrap();
    };
    const termConfigs = {
        "1": { title: "ĐIỀU KHOẢN BỔ SUNG", loadData: loadDKBSData },
        "2": { title: "QUYỀN VÀ NGHĨA VỤ CÁC BÊN", loadData: loadQVNVCBData },
        "3": { title: "ĐIỀU KHOẢN BẢO HÀNH VÀ BẢO TRÌ", loadData: loadBHVBTData },
        "4": { title: "ĐIỀU KHOẢN VI PHẠM VÀ BỒI THƯỜNG THIỆT HẠI", loadData: loadVPBTTHData },
        "5": { title: "ĐIỀU KHOẢN VỀ CHẤM DỨT HỢP ĐỒNG", loadData: loadCDHDData },
        "6": { title: "ĐIỀU KHOẢN VỀ GIẢI QUYẾT TRANH CHẤP", loadData: loadGQTCData },
        "7": { title: "ĐIỀU KHOẢN BẢO MẬT", loadData: loadBMData },
    };

    if (isLoadingappendixType || isLoadingAppendix || isLoadingContracts || (appendixId && loadingData)) {
        return (
            <div className='flex justify-center items-center'>
                <Spin />
            </div>
        );
    }

    // Cột cho bảng hạng mục thanh toán
    const columns = [
        {
            title: 'Tên hạng mục',
            dataIndex: 'name',
            render: (_, { key }) => (
                <Form.Item name={[key, 'name']} rules={[{ required: true, message: 'Nhập tên hạng mục' }]}>
                    <Input placeholder="Tên hạng mục" />
                </Form.Item>
            ),
        },
        {
            title: 'Giá trị',
            dataIndex: 'value',
            render: (_, { key }) => (
                <Form.Item name={[key, 'value']} rules={[{ required: true, message: 'Nhập giá trị' }]}>
                    <InputNumber
                        style={{ width: '100%' }}
                        min={0}
                        formatter={(value) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',') + ' ₫'}
                        parser={(value) => value.replace(/\D/g, '')}
                    />
                </Form.Item>
            ),
        },
        {
            title: 'Hành động',
            render: (_, { key }) => (
                <Button danger onClick={() => window.remove(key)}>
                    <DeleteFilled />
                </Button>
            ),
        },
    ];

    return (
        <div className={`min-h-screen p-8 ${isDarkMode ? 'bg-[#141414]' : ''}`}>
            <div className={`max-w-4xl mx-auto ${isDarkMode ? 'bg-[#1f1f1f]' : 'bg-[#f5f5f5] border'} shadow-lg rounded-lg p-6`}>
                <h1 className="text-3xl font-bold mb-6 text-center">
                    {appendixId ? 'CHỈNH SỬA PHỤ LỤC HỢP ĐỒNG' : 'TẠO PHỤ LỤC HỢP ĐỒNG'}
                </h1>
                {errorMessage && (
                    <div className="mb-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded">
                        {errorMessage}
                    </div>
                )}
                <Form 
                    form={form} 
                    layout="vertical" 
                    onFinish={onFinish}
                    onValuesChange={() => setErrorMessage('')}
                >
                    {!contractId && !appendixId && (
                        <Form.Item
                            label="Hợp Đồng"
                            name="contractId"
                            rules={[{ required: true, message: "Vui lòng chọn hợp đồng!" }]}
                        >
                            {contracts?.data.content.length > 0 ? (
                                <Select placeholder="Chọn hợp đồng">
                                    {contracts.data.content.map((contract) => (
                                        <Option key={contract.id} value={contract.id}>
                                            {contract.title}
                                        </Option>
                                    ))}
                                </Select>
                            ) : (
                                <p>Không có hợp đồng nào khả dụng.</p>
                            )}
                        </Form.Item>
                    )}
                    <Form.Item 
                        label={
                            <div className="flex items-center gap-2">
                                <span>Loại Phụ Lục</span>
                                <Popover 
                                    content="Lưu ý: Thanh lý hợp đồng không thể kết hợp với các loại phụ lục khác"
                                    trigger="hover"
                                >
                                    <InfoCircleOutlined className="text-blue-500" />
                                </Popover>
                            </div>
                        }
                    >
                        <Checkbox.Group onChange={handleCheckboxChange} className='flex flex-col gap-1'>
                            <Checkbox 
                                value="extend"
                                disabled={selectedTypes.includes('liquidate')}
                            >
                                <span className={selectedTypes.includes('liquidate') ? 'text-gray-400' : ''}>
                                    Gia hạn hợp đồng
                                </span>
                            </Checkbox>
                            <Checkbox 
                                value="cost"
                                disabled={selectedTypes.includes('liquidate')}
                            >
                                <span className={selectedTypes.includes('liquidate') ? 'text-gray-400' : ''}>
                                    Thay đổi chi phí và hạng mục thanh toán
                                </span>
                            </Checkbox>
                            <Checkbox 
                                value="terms"
                                disabled={selectedTypes.includes('liquidate')}
                            >
                                <span className={selectedTypes.includes('liquidate') ? 'text-gray-400' : ''}>
                                    Thay đổi nội dung, điều khoản
                                </span>
                            </Checkbox>
                            <Checkbox 
                                value="liquidate"
                                disabled={selectedTypes.some(type => ['extend', 'cost', 'terms'].includes(type))}
                            >
                                <span className={selectedTypes.some(type => ['extend', 'cost', 'terms'].includes(type)) ? 'text-gray-400' : ''}>
                                    Thanh lý hợp đồng
                                </span>
                            </Checkbox>
                        </Checkbox.Group>
                    </Form.Item>

                    <Form.Item
                        label="Tên Phụ Lục"
                        name="title"
                        rules={[{ required: true, whitespace: true, message: 'Vui lòng nhập tên phụ lục!' }]}
                    >
                        <Input
                            placeholder="Nhập tên phụ lục"
                            onChange={handleTitleChange}
                            addonAfter={
                                <Button
                                    type="text"
                                    onClick={() => {
                                        setIsTitleAutoGenerated(true);
                                        form.setFieldsValue({ title: generateAppendixTitle() });
                                    }}
                                >
                                    Tự động
                                </Button>
                            }
                        />
                    </Form.Item>


                    {selectedTypes.includes('extend') && (
                        <Form.Item
                            label="Thời gian gia hạn hợp đồng"
                            name="extendDateRange"
                            rules={[
                                { required: true, message: 'Vui lòng chọn thời gian gia hạn hợp đồng!' },
                                ({ getFieldValue }) => ({
                                    validator(_, value) {
                                        if (!value || value.length !== 2) {
                                            return Promise.resolve();
                                        }
                                        const [startDate, endDate] = value;

                                        // Kiểm tra endDate phải sau startDate
                                        if (endDate.isBefore(startDate)) {
                                            return Promise.reject(new Error('Ngày kết thúc gia hạn phải sau ngày bắt đầu!'));
                                        }

                                        return Promise.resolve();
                                    },
                                }),
                            ]}
                        >
                            <DatePicker.RangePicker
                                className="w-full"
                                showTime={{ format: 'HH:mm' }}
                                format="DD/MM/YYYY HH:mm"
                                placeholder={["Ngày bắt đầu gia hạn", "Ngày kết thúc gia hạn"]}
                                disabledDate={(current) => {
                                    if (!current) return false;
                                    // Không cho chọn ngày trước hôm nay
                                    return current < dayjs().startOf('day');
                                }}
                                onChange={(dates) => {
                                    if (dates) {
                                        form.setFieldsValue({
                                            extendStartDate: dates[0],
                                            extendEndDate: dates[1],
                                        });
                                    } else {
                                        form.setFieldsValue({
                                            extendStartDate: null,
                                            extendEndDate: null,
                                        });
                                    }
                                }}
                            />
                        </Form.Item>
                    )}
                    <Form.Item name="extendStartDate" hidden rules={[{ required: true, message: "Vui lòng chọn ngày bắt đầu gia hạn!" }]} />
                    <Form.Item name="extendEndDate" hidden rules={[{ required: true, message: "Vui lòng chọn ngày kết thúc gia hạn!" }]} />

                    {selectedTypes.includes('cost') && (
                        <>
                            <Divider orientation="center" className="text-lg">Hạng mục thanh toán</Divider>
                            <Form.List
                                name="contractItems"
                                rules={[
                                    {
                                        validator: async (_, contractItems) => {
                                            if (!contractItems || contractItems.length < 1) {
                                                return Promise.reject(new Error('Phải có ít nhất một hạng mục'));
                                            }
                                        },
                                    },
                                ]}
                            >
                                {(fields, { add, remove }) => {
                                    window.remove = remove;
                                    return (
                                        <>
                                            <Table
                                                dataSource={fields}
                                                columns={columns}
                                                pagination={false}
                                                rowKey={(record) => record.key}
                                            />
                                            <Button type="primary" onClick={() => add()} style={{ marginTop: 16 }}>
                                                <PlusOutlined /> Thêm hạng mục
                                            </Button>
                                        </>
                                    );
                                }}
                            </Form.List>

                            <div className="mt-4">
                                <Form.Item name="totalValue" label="Tổng giá trị hợp đồng">
                                    <InputNumber
                                        style={{ width: '100%' }}
                                        readOnly
                                        formatter={(value) =>
                                            value ? `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',') + ' ₫' : ''
                                        }
                                    />
                                </Form.Item>
                            </div>

                            <Divider orientation="center">Thanh toán</Divider>
                            <Form.List
                                name="payments"
                                rules={[
                                    {
                                        validator: async (_, payments) => {
                                            if (!payments || payments.length < 1) {
                                                return Promise.reject(new Error('Vui lòng thêm ít nhất một đợt thanh toán!'));
                                            }
                                            const totalValue = form.getFieldValue('totalValue');
                                            if (!totalValue) {
                                                return Promise.reject(new Error('Vui lòng nhập các hạng mục thanh toán trước!'));
                                            }
                                            const totalPayments = payments.reduce((sum, payment) => {
                                                return sum + (Number(payment.amount) || 0);
                                            }, 0);
                                            if (Math.abs(totalPayments - totalValue) > 0.01) {
                                                return Promise.reject(new Error(`Tổng số tiền các đợt thanh toán (${new Intl.NumberFormat('vi-VN').format(totalPayments)} VND) phải bằng tổng giá trị hợp đồng (${new Intl.NumberFormat('vi-VN').format(totalValue)} VND)!`));
                                            }
                                        },
                                    },
                                ]}
                            >
                                {(fields, { add, remove }) => (
                                    <>
                                        {fields.map(({ key, name, ...restField }) => (
                                            <Space key={key} align="baseline" className="flex mb-4 items-center w-full">
                                                <Form.Item
                                                    {...restField}
                                                    name={[name, "amount"]}
                                                    rules={[{ required: true, message: "Nhập số tiền thanh toán" }]}
                                                >
                                                    <InputNumber
                                                        style={{ width: "100%" }}
                                                        placeholder="Số tiền"
                                                        min={0}
                                                        formatter={(value) =>
                                                            value ? `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',') + ' ₫' : ''
                                                        }
                                                        parser={(value) => value.replace(/\D/g, '')}
                                                    />
                                                </Form.Item>
                                                <Form.Item
                                                    {...restField}
                                                    name={[name, "paymentDate"]}
                                                    rules={[{ required: true, message: "Chọn ngày thanh toán" }]}
                                                >
                                                    <DatePicker
                                                        style={{ width: 150 }}
                                                        placeholder="Ngày thanh toán"
                                                        disabledDate={(current) => current && current < dayjs().startOf('day')}
                                                        format="DD/MM/YYYY"
                                                    />
                                                </Form.Item>
                                                <Form.Item
                                                    {...restField}
                                                    name={[name, "paymentMethod"]}
                                                    rules={[{ required: true, message: "Chọn phương thức thanh toán" }]}
                                                >
                                                    <Select placeholder="Phương thức thanh toán" style={{ width: 200 }}>
                                                        <Option value="transfer">Chuyển khoản</Option>
                                                        <Option value="cash">Tiền mặt</Option>
                                                        <Option value="creditCard">Thẻ tín dụng</Option>
                                                    </Select>
                                                </Form.Item>
                                                <Form.Item>
                                                    <Button type="primary" onClick={() => remove(name)} danger>
                                                        <DeleteFilled />
                                                    </Button>
                                                </Form.Item>
                                            </Space>
                                        ))}
                                        <Button icon={<PlusOutlined />} type="primary" onClick={() => add()} block>
                                            Thêm đợt thanh toán
                                        </Button>
                                    </>
                                )}
                            </Form.List>
                        </>
                    )}

                    {selectedTypes.includes('terms') && (
                        <>
                            <Divider orientation="center" className="text-lg">Điều khoản & Cam kết</Divider>
                            <div className="ml-2 my-3">
                                <p className="font-bold text-[16px] mb-1">Điều khoản chung</p>
                                <p>Mô tả: (Điều khoản được áp dụng cho cả 2 bên)</p>
                            </div>
                            <Form.Item
                                label={<div className="flex justify-between items-center gap-4">
                                    <p>Điều khoản chung</p>
                                    <Popover
                                        // content={() => getTermsContent('generalTerms')}
                                        title="Danh sách Điều khoản chung đã chọn"
                                        trigger="hover"
                                        placement="right"
                                    >
                                        <Button icon={<EyeFilled />} />
                                    </Popover>
                                </div>}
                                name="generalTerms"
                                rules={[{ required: true, message: "Vui lòng chọn điều khoản chung!" }]}
                                className="ml-2"
                            >
                                <LazySelect
                                    loadDataCallback={loadGenaralData}
                                    options={generalData?.data.content}
                                    showSearch
                                    mode="multiple"
                                    placeholder="Chọn điều khoản chung"
                                    onChange={handleSelectChange}
                                    dropdownRender={(menu) => (
                                        <>
                                            {menu}
                                            <Divider style={{ margin: "8px 0" }} />
                                            <Space style={{ padding: "0 8px 4px" }}>
                                                <Button type="primary" icon={<PlusOutlined />}>Thêm điều khoản</Button>
                                            </Space>
                                        </>
                                    )}
                                />
                            </Form.Item>

                            <Form.Item
                                label={<div className="ml-2 my-3 font-bold text-[16px] flex justify-between items-center gap-5">
                                    <p>Các điều khoản khác</p>
                                </div>}
                                name="additionalTerms"
                            >
                                <Checkbox.Group
                                    className="flex flex-col ml-4 gap-4"
                                    options={[
                                        { label: "ĐIỀU KHOẢN BỔ SUNG", value: 1 },
                                        { label: "QUYỀN VÀ NGHĨA VỤ CÁC BÊN", value: 2 },
                                        { label: "ĐIỀN KHOẢN BẢO HÀNH VÀ BẢO TRÌ", value: 3 },
                                        { label: "ĐIỀU KHOẢN VỀ VI PHẠM VÀ BỒI THƯỜNG THIỆT HẠI", value: 4 },
                                        { label: "ĐIỀU KHOẢN VỀ CHẤM DỨT HỢP ĐỒNG", value: 5 },
                                        { label: "ĐIỀU KHOẢN VỀ GIẢI QUYẾT TRANH CHẤP", value: 6 },
                                        { label: "ĐIỀU KHOẢN BẢO MẬT", value: 7 }
                                    ]}
                                    onChange={handleClauseCheckboxChange}
                                />
                            </Form.Item>

                            <div className="flex flex-col">
                                {selectedOthersTerms.map(termId => (
                                    <TermSection
                                        key={termId}
                                        termId={termId}
                                        title={termConfigs[termId].title}
                                        form={form}
                                        loadDataCallback={termConfigs[termId].loadData}
                                    />
                                ))}
                            </div>

                            <Divider orientation="center">Điều khoản đặc biệt</Divider>
                            <Form.Item
                                label={<div className="ml-2 my-3">
                                    <p className="font-bold text-[16px]">ĐIỀU KHOẢN ĐẶC BIỆT BÊN A</p>
                                    <p>Mô tả: (Điều khoản được áp dụng cho chỉ riêng bên A)</p>
                                </div>}
                                name="specialTermsA"
                            >
                                <TextArea rows={4} placeholder="Nhập điều khoản bên A" />
                            </Form.Item>

                            <Form.Item
                                label={<div className="ml-2 my-3">
                                    <p className="font-bold text-[16px]">ĐIỀU KHOẢN ĐẶC BIỆT BÊN B</p>
                                    <p>Mô tả: (Điều khoản được áp dụng cho chỉ riêng bên B)</p>
                                </div>}
                                name="specialTermsB"
                            >
                                <TextArea rows={4} placeholder="Nhập điều khoản bên B" />
                            </Form.Item>
                        </>
                    )}

                    {selectedTypes.includes('liquidate') && (
                        <>
                            <Form.Item
                                label="Lý do thanh lý"
                                name="liquidateReason"
                                rules={[{ required: true, message: 'Vui lòng nhập lý do thanh lý!' }]}
                            >
                                <Input.TextArea placeholder="Nhập lý do thanh lý" />
                            </Form.Item>


                        </>
                    )}

                    <Form.Item className="text-center mt-5">
                        <Button type="primary" htmlType="submit" className="w-1/2 " loading={LoadingUpdate || LoadingCreate}>
                            {appendixId ? 'Cập Nhật Phụ Lục' : 'Tạo Phụ Lục'}
                        </Button>
                    </Form.Item>
                </Form>
            </div>

            {/* Modal chỉnh sửa */}
            <Modal
                title="Chỉnh sửa loại phụ lục"
                open={isEditModalVisible}
                onOk={handleUpdate}
                onCancel={() => setIsEditModalVisible(false)}
                confirmLoading={isLoadingUpdateAppendixType}
                okText="Cập nhật"
                cancelText="Hủy"
            >
                <Form form={editForm} layout="vertical">
                    <Form.Item
                        label="Tên loại phụ lục"
                        name="name"
                        rules={[{ required: true, whitespace: true, message: 'Vui lòng nhập tên loại phụ lục!' }]}
                    >
                        <Input placeholder="Nhập tên loại phụ lục" />
                    </Form.Item>
                </Form>
            </Modal>

            {/* Modal xác nhận xóa */}
            <Modal
                title="Xác nhận xóa"
                open={isDeleteModalVisible}
                onOk={handleConfirmDelete}
                onCancel={() => setIsDeleteModalVisible(false)}
                confirmLoading={isLoadingDeleteAppendixType}
                okText="Xóa"
                cancelText="Hủy"
                okButtonProps={{ danger: true }}
            >
                <p>Bạn có chắc chắn muốn xóa loại phụ lục <strong>{currentAppendixType?.name}</strong> không?</p>
            </Modal>
        </div>
    );
};

export default ContractAppendixPage;